unit UConstants;

interface

const

    EPSILON = 0;
    DOLLAR  = 1;

    t_id = 2;
    t_constante_inteira = 3;
    t_constante_real = 4;
    t_constante_binaria = 5;
    t_constante_hexadecimal = 6;
    t_constante_string = 7;
    t_bin = 8;
    t_bool = 9;
    t_def = 10;
    t_do = 11;
    t_elif = 12;
    t_else = 13;
    t_end = 14;
    t_false = 15;
    t_float = 16;
    t_hexa = 17;
    t_if = 18;
    t_int = 19;
    t_listen = 20;
    t_main = 21;
    t_speak = 22;
    t_str = 23;
    t_toInt = 24;
    t_toBin = 25;
    t_toHexa = 26;
    t_true = 27;
    t_whileFalse = 28;
    t_TOKEN_29 = 29; //"("
    t_TOKEN_30 = 30; //")"
    t_TOKEN_31 = 31; //"=="
    t_TOKEN_32 = 32; //"!="
    t_TOKEN_33 = 33; //"<"
    t_TOKEN_34 = 34; //">"
    t_TOKEN_35 = 35; //"&"
    t_TOKEN_36 = 36; //"|"
    t_TOKEN_37 = 37; //"!"
    t_TOKEN_38 = 38; //"+"
    t_TOKEN_39 = 39; //"-"
    t_TOKEN_40 = 40; //"*"
    t_TOKEN_41 = 41; //"/"
    t_TOKEN_42 = 42; //","
    t_TOKEN_43 = 43; //"."
    t_TOKEN_44 = 44; //";"
    t_TOKEN_45 = 45; //":"
    t_TOKEN_46 = 46; //"="
    t_TOKEN_47 = 47; //"+="
    t_TOKEN_48 = 48; //"-="

    STATES_COUNT = 43;

    TOKEN_STATE : array[0..STATES_COUNT-1] of integer =
        ( -2,  0, 37, -1, -1, 35, 29, 30, 40, 38, 42, 39, 43, 41,  3,  3, 45, 44, 33, 46, 34,  2, 36, 32,  7, -1, -1, 47, 48, -2,  0, -1, 31,  2,  5,  6, -2,  0,  4,  4, -2,  0, -1 );

    SPECIAL_CASES_INDEXES : array[0..49] of integer =
        ( 0, 0, 0, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21 );

    SPECIAL_CASES_KEYS : array[0..20] of string =
        (  'bin', 'bool', 'def', 'do', 'elif', 'else', 'end', 'false', 'float', 'hexa', 'if', 'int', 'listen', 'main', 'speak', 'str', 'toBin', 'toHexa', 'toInt', 'true', 'whileFalse' );

    SPECIAL_CASES_VALUES : array[0..20] of integer =
        (  8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 24, 27, 28 );

    SCANNER_ERROR : array[0..STATES_COUNT-1] of string =
    (
        'Simbolo inválido',
        '',
        '',
        'Constante string inválida ou não finalizada',
        'Constante binária ou hexadecimal inválida',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        '',
        'Constante binária inválida',
        'Constante hexadecimal inválida',
        '',
        '',
        'Comentário de bloco inválido ou não finalizado',
        '',
        'Erro identificando constante_real',
        '',
        '',
        '',
        '',
        'Erro identificando <ignorar>',
        '',
        '',
        '',
        'Erro identificando <ignorar>',
        '',
        'Erro identificando constante_real'
    );
    START_SYMBOL = 49;

    FIRST_NON_TERMINAL    = 49;
    FIRST_SEMANTIC_ACTION = 88;

    PARSER_TABLE : array[0..38, 0..47] of integer =
    (
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1,  1, -1,  1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1,  4, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1,  7, -1,  5, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, 21, 19, -1, -1, -1, -1, -1, -1, 18, 22, -1, 17, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, 23, 24, 28, 29, 27, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 39, 39, 39, 39, 39, 39, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, 39, -1, -1, -1, -1, -1, -1, -1, 39, 39, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 52, 52, 52, 52, 52, 52, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, 52, -1, -1, -1, -1, -1, -1, -1, 55, 52, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 56, 56, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 60, 61, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 67, 67, 67, 67, 67, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, 67, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 71, 71, 71, 71, 71, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, 71, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 77, 78, 79, 81, 82, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, -1, -1, -1, -1, -1, -1, -1, 84, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 48, 48, 48, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, 48, -1, -1, -1, -1, -1, -1, -1, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, 49, 50, -1, -1, -1, -1, -1, 51, -1, 51, 51, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 66, 66, 66, 66, 66, 66, -1, 64, 65, -1, -1, 66, -1, 66, 66, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, 70, 70, 70, 70, 70, 70, -1, 70, 70, 68, 69, 70, -1, 70, 70, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, 35, 35, 35, 35 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1 ),
        ( -1,  2, -1, -1, -1, -1, -1, -1, -1, -1,  2,  3,  3,  3, -1, -1, -1,  2, -1,  2, -1,  2, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 16, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 32, 33 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, 57, 57, 57, 58, 58, -1, -1, -1, -1, -1, 58, -1, 58, 58, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 73, 73, 73, 73, 73, 73, -1, 73, 73, 73, 73, 73, 72, 73, 73, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 75, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 ),
        ( -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 )
    );

    PRODUCTIONS : array[0..85, 0..7] of integer =
    (
        (  4, 50, 21, 51, 14,  0,  0,  0 ),
        (  3, 52, 44, 79,  0,  0,  0,  0 ),
        (  1, 51,  0,  0,  0,  0,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  1, 53,  0,  0,  0,  0,  0,  0 ),
        (  1, 54,  0,  0,  0,  0,  0,  0 ),
        (  1, 55,  0,  0,  0,  0,  0,  0 ),
        (  1, 56,  0,  0,  0,  0,  0,  0 ),
        (  1, 57,  0,  0,  0,  0,  0,  0 ),
        (  2, 10, 87,  0,  0,  0,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  2, 58, 80,  0,  0,  0,  0,  0 ),
        (  1, 87,  0,  0,  0,  0,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  2, 59, 81,  0,  0,  0,  0,  0 ),
        (  3, 45, 60, 44,  0,  0,  0,  0 ),
        (  3, 46, 61, 44,  0,  0,  0,  0 ),
        (  1, 19,  0,  0,  0,  0,  0,  0 ),
        (  1, 16,  0,  0,  0,  0,  0,  0 ),
        (  1,  9,  0,  0,  0,  0,  0,  0 ),
        (  1, 23,  0,  0,  0,  0,  0,  0 ),
        (  1,  8,  0,  0,  0,  0,  0,  0 ),
        (  1, 17,  0,  0,  0,  0,  0,  0 ),
        (  1,  3,  0,  0,  0,  0,  0,  0 ),
        (  1,  4,  0,  0,  0,  0,  0,  0 ),
        (  1, 27,  0,  0,  0,  0,  0,  0 ),
        (  1, 15,  0,  0,  0,  0,  0,  0 ),
        (  1,  7,  0,  0,  0,  0,  0,  0 ),
        (  1,  5,  0,  0,  0,  0,  0,  0 ),
        (  1,  6,  0,  0,  0,  0,  0,  0 ),
        (  2, 59, 82,  0,  0,  0,  0,  0 ),
        (  2, 46, 73,  0,  0,  0,  0,  0 ),
        (  2, 47, 73,  0,  0,  0,  0,  0 ),
        (  2, 48, 73,  0,  0,  0,  0,  0 ),
        (  2,  2, 77,  0,  0,  0,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  2, 42, 59,  0,  0,  0,  0,  0 ),
        (  4, 20, 29, 59, 30,  0,  0,  0 ),
        (  4, 22, 29, 62, 30,  0,  0,  0 ),
        (  2, 73, 78,  0,  0,  0,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  2, 42, 62,  0,  0,  0,  0,  0 ),
        (  7, 18, 73, 45, 51, 63, 64, 14 ),
        (  5, 12, 73, 45, 51, 63,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  2, 13, 51,  0,  0,  0,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  6, 11, 51, 28, 45, 73, 14,  0 ),
        (  2, 65, 74,  0,  0,  0,  0,  0 ),
        (  3, 35, 65, 74,  0,  0,  0,  0 ),
        (  3, 36, 65, 74,  0,  0,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  1, 66,  0,  0,  0,  0,  0,  0 ),
        (  1, 27,  0,  0,  0,  0,  0,  0 ),
        (  1, 15,  0,  0,  0,  0,  0,  0 ),
        (  2, 37, 65,  0,  0,  0,  0,  0 ),
        (  2, 69, 83,  0,  0,  0,  0,  0 ),
        (  2, 68, 69,  0,  0,  0,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  1, 31,  0,  0,  0,  0,  0,  0 ),
        (  1, 32,  0,  0,  0,  0,  0,  0 ),
        (  1, 33,  0,  0,  0,  0,  0,  0 ),
        (  1, 34,  0,  0,  0,  0,  0,  0 ),
        (  2, 70, 75,  0,  0,  0,  0,  0 ),
        (  3, 38, 70, 75,  0,  0,  0,  0 ),
        (  3, 39, 70, 75,  0,  0,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  2, 71, 76,  0,  0,  0,  0,  0 ),
        (  3, 40, 71, 76,  0,  0,  0,  0 ),
        (  3, 41, 71, 76,  0,  0,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  2, 72, 84,  0,  0,  0,  0,  0 ),
        (  2, 43, 86,  0,  0,  0,  0,  0 ),
        (  1,  0,  0,  0,  0,  0,  0,  0 ),
        (  1, 24,  0,  0,  0,  0,  0,  0 ),
        (  1, 25,  0,  0,  0,  0,  0,  0 ),
        (  1, 26,  0,  0,  0,  0,  0,  0 ),
        (  1,  2,  0,  0,  0,  0,  0,  0 ),
        (  1,  3,  0,  0,  0,  0,  0,  0 ),
        (  1,  4,  0,  0,  0,  0,  0,  0 ),
        (  1,  7,  0,  0,  0,  0,  0,  0 ),
        (  1,  5,  0,  0,  0,  0,  0,  0 ),
        (  1,  6,  0,  0,  0,  0,  0,  0 ),
        (  3, 29, 73, 30,  0,  0,  0,  0 ),
        (  2, 38, 72,  0,  0,  0,  0,  0 ),
        (  2, 39, 72,  0,  0,  0,  0,  0 )
    );

    PARSER_ERROR : array [0..87] of string =
    (
        '',
        'Era esperado EOF',
        'Era esperado identificador',
        'Era esperado constante_inteira',
        'Era esperado constante_real',
        'Era esperado constante_binaria',
        'Era esperado constante_hexadecimal',
        'Era esperado constante_string',
        'Era esperado bin',
        'Era esperado bool',
        'Era esperado def',
        'Era esperado do',
        'Era esperado elif',
        'Era esperado else',
        'Era esperado end',
        'Era esperado false',
        'Era esperado float',
        'Era esperado hexa',
        'Era esperado if',
        'Era esperado int',
        'Era esperado listen',
        'Era esperado main',
        'Era esperado speak',
        'Era esperado str',
        'Era esperado toInt',
        'Era esperado toBin',
        'Era esperado toHexa',
        'Era esperado true',
        'Era esperado whileFalse',
        'Era esperado "("',
        'Era esperado ")"',
        'Era esperado "=="',
        'Era esperado "!="',
        'Era esperado "<"',
        'Era esperado ">"',
        'Era esperado "&"',
        'Era esperado "|"',
        'Era esperado "!"',
        'Era esperado "+"',
        'Era esperado "-"',
        'Era esperado "*"',
        'Era esperado "/"',
        'Era esperado ","',
        'Era esperado "."',
        'Era esperado ";"',
        'Era esperado ":"',
        'Era esperado "="',
        'Era esperado "+="',
        'Era esperado "-="',
        'Era esperado main', //'<declaracao> inválido',
        'Era esperado main', //'<declaracao_variavel> inválido',
        'Era esperado identificador, do, if ou listen', //'<lista_de_comandos> inválido',
        'Era esperado identificador, do, if ou listen', //'<comandos> inválido',
        '<atribuicao> inválido',
        'Era esperado listen', //'<entrada_de_dados> inválido',
        'Era esperado speak', //'<saida_de_dados> inválido',
        'Era esperado if', //'<condicional> inválido',
        'Era esperado do', //'<repeticao> inválido',
        'Era esperado identificador', //'<variavel> inválido',
        'Era esperado identificador', //'<lista_id> inválido',
        'Era esperado tipo', //'<tipo> inválido',
        '<valor> inválido',
        '<lista_de_expressoes> inválido',
        'Era esperado elif, else ou end', //'<elif> inválido',
        'Era esperado else ou end', //'<else> inválido',
        'Esperada uma expressão', //'<elemento> inválido',
        'Esperada uma expressão', //'<relacional> inválido',
        'Esperada uma expressão', //'<relacional2> inválido',
        'Esperada uma expressão', //'<operador_relacional> inválido',
        'Esperada uma expressão', //'<aritmetica> inválido',
        'Esperada uma expressão', //'<termo> inválido',
        'Esperada uma expressão', //'<fator> inválido',
        'Esperada uma expressão', //'<membro> inválido',
        'Esperada uma expressão', //'<expressao> inválido',
        'Esperada uma expressão', //'<expressao1> inválido',
        'Esperada uma expressão', //'<aritmetica1> inválido',
        'Esperada uma expressão', //'<termo1> inválido',
        'Era esperado ) , : = += -=', //'<lista_id1> inválido',
        '<lista_de_expressoes1> inválido',
        'Era esperado identificador, do, elif, else, end, if, listem ou whileFalse', //'<lista_de_comandos1> inválido',
        'Era esperado identificado ou main', //'<declaracao1> inválido',
        'Era esperado : =', //'<variavel1> inválido',
        'Esperada uma expressão', //'<atribuicao1> inválido',
        'Esperada uma expressão', //'<relacional1> inválido',
        'Esperada uma expressão', //'<fator1> inválido',
        'Esperada uma expressão', //'<termo2> inválido',
        'Esperada uma expressão', //'<fator2> inválido',
        '<declaracaox> inválido'
    );

implementation

end.
